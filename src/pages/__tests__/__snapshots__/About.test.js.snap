// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`About Page matches snapshot 1`] = `
Array [
  <nav
    className="navbar navbar-expand-lg navbar-light bg-light"
  >
    <div
      className="container"
    >
      <span
        className="navbar-brand"
      >
        VisualMST
      </span>
      <button
        aria-controls="basic-navbar-nav"
        aria-label="Toggle navigation"
        className="navbar-toggler collapsed"
        onClick={[Function]}
        type="button"
      >
        <span
          className="navbar-toggler-icon"
        />
      </button>
      <div
        aria-expanded={null}
        className="navbar-collapse collapse"
        id="basic-navbar-nav"
      >
        <div
          className="ml-auto navbar-nav"
          onKeyDown={[Function]}
        >
          <a
            className="active nav-link"
            data-rr-ui-event-key="/"
            disabled={false}
            href="/"
            onClick={[Function]}
            style={Object {}}
          >
            Home
          </a>
          <a
            className="nav-link"
            data-rr-ui-event-key="/about"
            disabled={false}
            href="/about"
            onClick={[Function]}
          >
            About
          </a>
          <a
            className="nav-link"
            data-rr-ui-event-key="/algorithms"
            disabled={false}
            href="/algorithms"
            onClick={[Function]}
          >
            Algorithms
          </a>
          <a
            className="nav-link"
            data-rr-ui-event-key="/contact"
            disabled={false}
            href="/contact"
            onClick={[Function]}
          >
            Contact
          </a>
        </div>
      </div>
    </div>
  </nav>,
  <div
    className="pt-5 container"
    data-testid="home-container"
  >
    <div
      className="centered"
      data-testid="centered-div"
    >
      <h3>
        About...
      </h3>
      <div
        className="accordion"
        data-testid="accordion"
        style={
          Object {
            "marginBottom": "50px",
            "marginTop": "10px",
          }
        }
      >
        <div
          className="accordion-item"
          data-testid="accordion-item-0"
        >
          <h2
            className="accordion-header"
            data-testid="accordion-item-0-header"
          >
            <button
              aria-expanded={false}
              className="accordion-button"
              onClick={[Function]}
              type="button"
            >
              This Web Application
            </button>
          </h2>
          <div
            aria-expanded={null}
            className="accordion-collapse collapse show"
          >
            <div
              className="accordion-body"
              data-testid="accordion-item-0-body"
            >
              <p>
                VisualMST has been created as the product of a level 4 Individual Project at the University of Glasgow.
              </p>
              <p>
                The aim of the application is provide an interactive platform for users to learn about 
                <b>
                  minimum spanning tree algorithms
                </b>
                . Users will be able to select an algorithm and see a visualisation of it executing. The two algorithms implemented for this project are
                 
                <b>
                  Kruskal's Algorithm
                </b>
                 and 
                <b>
                  Prim's Algorithm
                </b>
                .
              </p>
              <p>
                Please use this application from a desktop for the best experience!
              </p>
            </div>
          </div>
        </div>
        <div
          className="accordion-item"
          data-testid="accordion-item-1"
        >
          <h2
            className="accordion-header"
            data-testid="accordion-item-1-header"
          >
            <button
              aria-expanded={false}
              className="accordion-button collapsed"
              onClick={[Function]}
              type="button"
            >
              Minimum Spanning Trees
            </button>
          </h2>
          <div
            aria-expanded={null}
            className="accordion-collapse collapse"
          >
            <div
              className="accordion-body"
              data-testid="accordion-item-1-body"
            >
              <p>
                A Minimum Spanning tree is a subset of the edges of a connected, edge-weighted graph that must follow to the following three criteria.
              </p>
              <ul>
                <li>
                  All vertices must be connected.
                </li>
                <li>
                  There must be no cycles.
                </li>
                <li>
                  There must be minimum possible total weight.
                </li>
              </ul>
              <p>
                Below we can see an example of a graph with it's minimum spanning tree highlighted in amber, with a minimum total weight of 44. The grey lines represent edges of the graph that were rejected from the minimum spanning tree.
              </p>
              <img
                className=""
                src="mst.png"
                style={
                  Object {
                    "display": "block",
                    "margin": "auto",
                    "marginBottom": "15px",
                    "width": "80%",
                  }
                }
              />
              <p>
                There are a number of algorithms we can use to find the minimum spanning tree of a graph but the two featured here are
                 
                <b>
                  Kruskal's Algorithm
                </b>
                 and 
                <b>
                  Prim's Algorithm
                </b>
                .
              </p>
            </div>
          </div>
        </div>
        <div
          className="accordion-item"
          data-testid="accordion-item-2"
        >
          <h2
            className="accordion-header"
            data-testid="accordion-item-2-header"
          >
            <button
              aria-expanded={false}
              className="accordion-button collapsed"
              onClick={[Function]}
              type="button"
            >
              Kruskal's Algorithm
            </button>
          </h2>
          <div
            aria-expanded={null}
            className="accordion-collapse collapse"
          >
            <div
              className="accordion-body"
              data-testid="accordion-item-2-body"
            >
              <div
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                    "marginBottom": "30px",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "marginLeft": "20px",
                      "width": "60%",
                    }
                  }
                >
                  <p>
                    Kruskal's Algorithm is a minimum spanning tree algorithm written by Joseph Kruskal in 1956.
                  </p>
                  <p>
                    It is a greedy algorithm as it builds the tree by selecting the lowest weight edge available at each step.
                  </p>
                </div>
                <img
                  className=""
                  src="kruskal.jpg"
                  style={
                    Object {
                      "marginLeft": "25px",
                      "width": "25%",
                    }
                  }
                />
              </div>
              <div
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                  }
                }
              >
                <img
                  className=""
                  src="vis2.gif"
                  style={
                    Object {
                      "width": "50%",
                    }
                  }
                />
                <div
                  style={
                    Object {
                      "width": "50%",
                    }
                  }
                >
                  <p>
                    The algorithm's steps are as follows:
                  </p>
                  <ol>
                    <li>
                      Sort the edges of the tree by their weight in non-descending order.
                    </li>
                    <li>
                      Take the lowest weight edge and check if it forms a cycle with the tree so far
                      <ul>
                        <li>
                          If cycle is not formed we accept the edge and add it to the spanning tree.
                        </li>
                        <li>
                          If cycle is formed we reject the edge.
                        </li>
                      </ul>
                    </li>
                    <li>
                      Repeat the previous step until there are (n-1) edges in the spanning tree. (n = number of vertices)
                    </li>
                  </ol>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div
          className="accordion-item"
          data-testid="accordion-item-3"
        >
          <h2
            className="accordion-header"
            data-testid="accordion-item-3-header"
          >
            <button
              aria-expanded={false}
              className="accordion-button collapsed"
              onClick={[Function]}
              type="button"
            >
              Prim's Algorithm
            </button>
          </h2>
          <div
            aria-expanded={null}
            className="accordion-collapse collapse"
          >
            <div
              className="accordion-body"
              data-testid="accordion-item-3-body"
            >
              <div
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                    "marginBottom": "15px",
                  }
                }
              >
                <img
                  className=""
                  src="prim.jpeg"
                  style={
                    Object {
                      "width": "20%",
                    }
                  }
                />
                <div
                  style={
                    Object {
                      "marginLeft": "15px",
                      "width": "75%",
                    }
                  }
                >
                  <p>
                    Prim's Algorithm (also known as Prim-Jarnik algorithm) is an minimum spanning tree algorithm written by Vojtěch Jarník in 1930 before being rediscovered by Robert Prim in 1957.
                  </p>
                  <p>
                    It is also classified as a greedy algorithm as it builds the tree by selecting the lowest weight edge available at each step.
                  </p>
                </div>
              </div>
              <div
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "marginRight": "15px",
                      "width": "50%",
                    }
                  }
                >
                  <p>
                    The algorithm's steps are as follows:
                  </p>
                  <ol>
                    <li>
                      Choose a starting vertex, add it to the visited set and add its adjacent edges to the queue.
                    </li>
                    <li>
                      Take the vertex which has the lowest edge-weight value
                    </li>
                    <ul>
                      <li>
                        If vertex isn't in the visited set we add it and add its adjacent edges to the queue.
                      </li>
                      <li>
                        If vertex already in the visited set we reject it. 
                      </li>
                    </ul>
                    <li>
                      Repeat the previous step until all vertices are in the visited set.
                    </li>
                  </ol>
                </div>
                <img
                  className=""
                  src="vis.gif"
                  style={
                    Object {
                      "width": "50%",
                    }
                  }
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="accordion-item"
          data-testid="accordion-item-4"
        >
          <h2
            className="accordion-header"
            data-testid="accordion-item-4-header"
          >
            <button
              aria-expanded={false}
              className="accordion-button collapsed"
              onClick={[Function]}
              type="button"
            >
              The Developer
            </button>
          </h2>
          <div
            aria-expanded={null}
            className="accordion-collapse collapse"
          >
            <div
              className="accordion-body"
              data-testid="accordion-item-4-body"
            >
              <div
                style={
                  Object {
                    "alignItems": "center",
                    "display": "flex",
                  }
                }
              >
                <div
                  style={
                    Object {
                      "width": "50%",
                    }
                  }
                >
                  <p>
                    Hi. I'm Ian, a fourth year Computing Science student at the University of Glasgow.
                  </p>
                  <p>
                    I hope you enjoy using VisualMST, and that it helps you understand minimum spanning tree algorithms a little better!
                     
                  </p>
                  <a
                    data-testid="linkedin-link"
                    href="https://www.linkedin.com/in/ian-brown-a164581b7/"
                    target="_blank"
                  >
                    <img
                      className=""
                      src="li.png"
                      style={
                        Object {
                          "width": "20%",
                        }
                      }
                    />
                  </a>
                  <a
                    data-testid="github-link"
                    href="https://github.com/ianjbrown"
                    target="_blank"
                  >
                    <img
                      className=""
                      src="gh.png"
                      style={
                        Object {
                          "marginLeft": "10px",
                          "width": "20%",
                        }
                      }
                    />
                  </a>
                </div>
                <img
                  className=""
                  src="me_walk2.jpg"
                  style={
                    Object {
                      "marginLeft": "15px",
                      "width": "50%",
                    }
                  }
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
]
`;
